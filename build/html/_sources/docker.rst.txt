Full docker documentation
=========================

Docker definition
^^^^^^^^^^^^^^^^^

Docker daemon - сервер, работающий в фоновом режиме на хост-машине и умеющий скачивать, заливать образы, заливать из них контейнеры, следить за запущенными контейнерами, собирать логи, настраивать сеть между контейнерами. Кроме того, именно он создет образы контейнеров.

Docker - утилита для управления Docker daemon по HTTP. При сборке образа docker принимает пассивное участие, архивирует папку и передает по сети демону, который выполняет всю работу, поэтому лучше собирать тяжелые образы локально.

Docker Hub - хранение контейнеров. 

Docker image - компонента сборки docker.

Docker container - все, что нужно для работы приложения, каждый контейнер изолирован и является безопасной платформой для приложения.

Docker volume - файлы или директории, которые смонтированы на хосте и не являются частью UFS

cgroups - контроль ресурсов, которые использует контейнер, например, память и CPU. Они так же ответственны за заморозку и разморозку контейнеров

namespaces - изолирование контейнеров

Swarm - группировка нескольких docker хостов, позволяющих обращаться к ним как к унифицированному ресурсу.

Compose - создание и запуск приложения, собранного из несколько Docker контейнеров

Machine - установка и конфигурирование Docker хостов на локальных или удаленных устройствах

Dockerfile instruction
^^^^^^^^^^^^^^^^^^^^^^

ADD - копирует файлы в образ. Архив будет автоматически распакован. Сильно сложнее, нежеди простое COPY, поэтому лучше  всего использовать именно COPY.

CMD - запускает данную инструкцию, когда контейнер запущен. Если определен ENTRYPOINT, то данная инструкция воспринимается как аргументы к ENTRYPOINT. CMD инструкция переопределяется

COPY - копирование файлов ["src", "dest"], src - откуда, dest - куда. 

ENTRYPOINT - установка исполняемого файло для запуска при запуске контейнера. ENTRYPOINT инструкция часто используется для обеспечения стартового скрипта, который инициализирует переменные и сервисы перед интрепретацией любых заданных аргументов

ENV - определение переменных величин.

EXPOSE - определяет порт или порты, который буддут слушать данный контейнер. Часто эта информация используется во время соединения контейнеров или публикации портов с помощью поставки -P аргумента к команде docker run. 

FROM - настраивает базовый образ докерфайла

MAINTAINER - владелец. 

ONBUILD - определяет игструкцию, которая будет использована позже, когда образ используется в качестве базового слоя к другому образу. Это может быть полезно для обработки данных, которые будут добавлены в child images (например, код копирования данных в выбранные директории и скрипт по преобразованию этих данных)

RUN - запуск инструкций внутри контейнера и коммит результата

USER - настраивает пользователя для использования инструкций RUN, CMD, ENTRYPOINT

VOLUME - объявляет специальные файлы или директории в качестве volume. Если папка или директория уже существует в образе, то она будет скопирована в volume, когда контейнер стартует

WORKDIR - настраивает рабочую директорию для следующих инструкций RUN, CMD, ENTRYPOINT, ADD, COPY, может использоваться несколько раз, указанные пути могут использоваться и переопределяться к связанным предыдущим рабочим директориям

Docker process
^^^^^^^^^^^^^^

Команда ``sudo docker run -it ubuntu /bin/bash``

#. Скачивает образ ubuntu.

#. Создает контейнер.

#. Инициализирует суть\мост - позволяет обшаться докеру с хост машиной

#. Устанавливает IP адрес
   
#. Запускает указанный процесс

#. Обрабатывает и выдает вывод приложения
   
Docker important
^^^^^^^^^^^^^^^^

Docker использует объединенную файловую систему (union filesystem) для контейнеров, что позволяет монтировать несколько файловых систем в порядке иерархии и появляться в качестве единой системы.  Файловая система образа монтируется как read-only слой и любые изменения запущенного контейнера приводят к измненеию последующих

Чтобы все быстрее собиралось можно использовать .dockerignorefile, который может включать в себя файлы на подобие

        - .git (в корневой директории)

        - \*/.git (только в директории на один ниже корня)

Docker naming
^^^^^^^^^^^^^

#. author/name -принадлежат пользователю
#. name - общие подтвержденные
#. localhost:5000/name - развернуты на определенном сервере


Docker flags
^^^^^^^^^^^^

``-h``, ``--hostname`` - определяет имя хоста

``-d`` - запуск контейнера в фоновом режиме

``-n``, ``--name`` - задание имени контейнера

``--link`` - соеднинение двух контейнеров

``-v`` - название volume

``--no-cache`` - запуск без кеширования

``-P`` - выбор произвольного порта при запуске контейнера

``-p`` - выбор указанного порта при запуске контейнера

``-icc=false and --iptables`` - контейнера нельзя подсоединять к другим

Docker commands
^^^^^^^^^^^^^^^

Доступ к командной строке внутри контейнера

.. code:: console

        $ docker run -it container_name /bin/bash

Получение полной информации о контейнере

.. code:: console
        
        $ docker inspect container_name

Получение списка измененных файлов в контейнере

.. code:: console

        $ docker diff container_name

Получение списка логов

.. code:: console
        
        $ docker logs container_name


Сохранение в образ из какого-то базового образа

.. code:: console

        $ docker commit base_image__name image_name


Связка двух контейнеров

.. code:: console
      
        $ docker run -d -P --name web --link db:db training/webapp python app.py

При этом --link name:alias.name, alias - имя под которым этот контейнер будет известен запускаемому
Это приводит к тому, что в контейнере web появится набор переменных окружения, указывающих на контейнер db + в /etc/hosts контейнера web появится алиас db указывающий на ip, на котором запустили контейнер с базой данных.


Определение volume

.. code:: console
        
        $ docker run -it --name container-test -h CONtAINER -v /data debian /bin/bash


Hello
~~~~~~~~

