Full docker documentation
=========================

Docker definition
^^^^^^^^^^^^^^^^^

Docker daemon - сервер, работающий в фоновом режиме на хост-машине и умеющий скачивать, заливать образы, заливать из них контейнеры, следить за запущенными контейнерами, собирать логи, настраивать сеть между контейнерами. Кроме того, именно он создет образы контейнеров.

Docker - утилита для управления Docker daemon по HTTP. При сборке образа docker принимает пассивное участие, архивирует папку и передает по сети демону, который выполняет всю работу, поэтому лучше собирать тяжелые образы локально.

Docker Hub - хранение контейнеров. 

Docker image - компонента сборки docker.

Docker container - все, что нужно для работы приложения, каждый контейнер изолирован и является безопасной платформой для приложения.

Docker volume - файлы или директории, которые смонтированы на хосте и не являются частью UFS

cgroups - контроль ресурсов, которые использует контейнер, например, память и CPU. Они так же ответственны за заморозку и разморозку контейнеров

namespaces - изолирование контейнеров

Swarm - группировка нескольких docker хостов, позволяющих обращаться к ним как к унифицированному ресурсу.

Compose - создание и запуск приложения, собранного из несколько Docker контейнеров

Machine - установка и конфигурирование Docker хостов на локальных или удаленных устройствах

Dockerfile instruction
^^^^^^^^^^^^^^^^^^^^^^

ADD - копирует файлы в образ. Архив будет автоматически распакован. Сильно сложнее, нежеди простое COPY, поэтому лучше  всего использовать именно COPY.

CMD - запускает данную инструкцию, когда контейнер запущен. Если определен ENTRYPOINT, то данная инструкция воспринимается как аргументы к ENTRYPOINT. CMD инструкция переопределяется

COPY - копирование файлов ["src", "dest"], src - откуда, dest - куда. 

ENTRYPOINT - установка исполняемого файло для запуска при запуске контейнера. ENTRYPOINT инструкция часто используется для обеспечения стартового скрипта, который инициализирует переменные и сервисы перед интрепретацией любых заданных аргументов

ENV - определение переменных величин.

EXPOSE - определяет порт или порты, который буддут слушать данный контейнер. Часто эта информация используется во время соединения контейнеров или публикации портов с помощью поставки -P аргумента к команде docker run. 

FROM - настраивает базовый образ докерфайла

MAINTAINER - владелец. 

ONBUILD - определяет игструкцию, которая будет использована позже, когда образ используется в качестве базового слоя к другому образу. Это может быть полезно для обработки данных, которые будут добавлены в child images (например, код копирования данных в выбранные директории и скрипт по преобразованию этих данных)

RUN - запуск инструкций внутри контейнера и коммит результата

USER - настраивает пользователя для использования инструкций RUN, CMD, ENTRYPOINT

VOLUME - объявляет специальные файлы или директории в качестве volume. Если папка или директория уже существует в образе, то она будет скопирована в volume, когда контейнер стартует

WORKDIR - настраивает рабочую директорию для следующих инструкций RUN, CMD, ENTRYPOINT, ADD, COPY, может использоваться несколько раз, указанные пути могут использоваться и переопределяться к связанным предыдущим рабочим директориям

Docker process
^^^^^^^^^^^^^^

Команда ``sudo docker run -it ubuntu /bin/bash``

#. Скачивает образ ubuntu.

#. Создает контейнер.

#. Инициализирует суть\мост - позволяет обшаться докеру с хост машиной

#. Устанавливает IP адрес
   
#. Запускает указанный процесс

#. Обрабатывает и выдает вывод приложения
   
Docker important
^^^^^^^^^^^^^^^^

Docker использует объединенную файловую систему (union filesystem) для контейнеров, что позволяет монтировать несколько файловых систем в порядке иерархии и появляться в качестве единой системы.  Файловая система образа монтируется как read-only слой и любые изменения запущенного контейнера приводят к измненеию последующих

Чтобы все быстрее собиралось можно использовать .dockerignorefile, который может включать в себя файлы на подобие

        - .git (в корневой директории)

        - \*/.git (только в директории на один ниже корня)

Всегда важно настраивать USER в Dockerfile. Если этого не сделать, ваш процесс будет запущен как корневой внутри контейнера. Так как UID одинаковые внутри контейнера и на хосте, то если злоумышленник взламывает контейнер, то он может получить root права хоста.
        
Docker naming
^^^^^^^^^^^^^

#. author/name -принадлежат пользователю
#. name - общие подтвержденные
#. localhost:5000/name - развернуты на определенном сервере


Docker flags
^^^^^^^^^^^^

``-a, -attach`` - прикрепляет данный стрим в терминал

``-d, -detach`` - запуск контенйера на фоне

``-i, --interactive`` - сохраняет stdin открытым, обычно используется с ``-t`` чтобы начать интерактивную сессию с контейнером

``--restart`` - определяет количество раз рестарта, пример применения - ``--restart on-failure:10 postgres`` - запускает контейнер постгреса и пытается рестаровать 10 раз если случается ошибка

``--rm`` - удаляет контейнер, если он существует. Не может использоваться с ``-d``

``-e, --env`` - задание переменных окружения внутри контейнера, пример использования ``sudo docker tun -e var1-val -e var2="val 2" debian env``

``-h``, ``--hostname`` - определяет имя хоста

``--expose`` - эквивалентно EXPOSE в докерфайле, определяет порт, используемый контейнером, но не открывает его. 

``-p, --publish`` - публикация порта контейнера, делает кго доступным с хоста.

``--entrypoint`` - устанавливает entrypoint для контейнера с заданными аргументами, переопределяет ENTRYPOINT инструкцию в докерфайле

``-d`` - запуск контейнера в фоновом режиме

``-n``, ``--name`` - задание имени контейнера

``--link`` - соеднинение двух контейнеров

``-v`` - название volume

``--no-cache`` - запуск без кеширования

``-P`` - выбор произвольного порта при запуске контейнера

``-p`` - выбор указанного порта при запуске контейнера

``-icc=false and --iptables`` - контейнера нельзя подсоединять к другим

``-v`` - флаг с volume, при удалении контейнера удаляет и volume

Docker commands
^^^^^^^^^^^^^^^

Доступ к командной строке внутри контейнера

.. code:: console

        $ docker run -it container_name /bin/bash

Получение полной информации о контейнере

.. code:: console
        
        $ docker inspect container_name

Получение списка измененных файлов в контейнере

.. code:: console

        $ docker diff container_name

Получение списка логов

.. code:: console
        
        $ docker logs container_name


Сохранение в образ из какого-то базового образа

.. code:: console

        $ docker commit base_image__name image_name


Связка двух контейнеров

.. code:: console
      
        $ docker run -d -P --name web --link db:db training/webapp python app.py

При этом --link name:alias.name, alias - имя под которым этот контейнер будет известен запускаемому
Это приводит к тому, что в контейнере web появится набор переменных окружения, указывающих на контейнер db + в /etc/hosts контейнера web появится алиас db указывающий на ip, на котором запустили контейнер с базой данных.


Определение volume и указание папки на хосте

.. code:: console
        
        $ docker run -it --name container-test -h CONtAINER -v /data debian /bin/bash
        $ docker run -v /home/data:/data debian ls /data


Attach команда позволяет пользователям просматривать или взаимодействовать с основным процеммом внутри контейнера

.. code:: console
        
        $ docker attach $ID

Create команда создает контейнер из образа, но не запускает его. Принимает ровно те же аргументы, что и docker run.

.. code:: console

        $ docker create image

Cp копирует файлы и директории между контейнером и хостом

.. code:: console

        $ docker cp

Exec запускает команды внутри контейнера, по сути замена ssh для входа в контейнер

.. code:: console
        
        $ docker exec -it echo "Hello"

Kill - отправялет сигнал главному процессу в контейнер, по дефолту отправляет сигнал, который убивает контейнер. 

.. code:: console

        $ docker kill -s SIGRAP container_id
        $ docker kill container_id


Pause - приостанавливает все процессы внутри данного контейнера, перезапускается с помощью unpause


Top - обеспечивает информацию о запущенных процессах внутри контейнера.

tag - связывает репозиторий и имя тега образа

.. code:: console
        
        $ docker tag newname:latest name/newname:latest


Сделать так, чтобы изменения в коде автоматически применялись в контейнере - просто монтировать папку, в которой происходит изменение кода в соответствующий докер контейнер в качестве тома

.. code:: console

        $ docker run -d -p 5000:5000 -v "$(pwd)"/app: /app container_name

Получить информацию об использующихся портах для данного контейнера

.. code:: console

        $ docker port container_name

Получение только id, например, контейнеров

.. code:: console

        $ docker ps -q

Использование Docker Compose
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``up`` - запускают все контейнеры, определенные в Compose файле. Часто используется в комбинации с ``-d`` для запуска в фоновом режиме.

``build`` - пересобирает все образы, созданные из Докерфайла. Эта команда не будет билдить образ до тех пор, пока он не существует, поэтому команду надо использовать всякий раз когда надо обновить образ



Dockerfile examples
^^^^^^^^^^^^^^^^^^^

Примеры с volume. Надо отметить, что все инструкции после VOLUME инструкции не могут изменять этот volume

.. code:: console
        
        FROM debian:wheezy
        VOLUME /data

Пример, когда команды не сработают 

.. code:: console
        
        FROM debian:wheezy
        RUN useradd foo
        VOLUME /data
        RUN touch /data/x
        RUN chown -R foo:foo /data

Пример, когда сработает как надо

.. code:: console

        FROM debian:wheezy
        RUN useradd foo
        RUN mkdir /data && touch /data/x
        RUN chown -R foo:foo /data
        VOLUME /data





Hello
~~~~~~~~

